# Ninja Battle Tic-Tac-Toe

# Craeted by: Lucas Baranoski - 20962406, Matthew Kim - 20882490, Hossein Kariminia - 20976477, and Phavan Velnathan - 20961030

# Lucas Baranoski - 20962406

import random 

def drawBoard (board):
    #this function prints out the board that it was passed
    #"board" is a list of 10 strings representing the board 
    #the number keys for the board represent the keys on the right of a keyboard which associate with the grid spots on the board
    
    print (board[7] + '|' + board[8] + '|' + board[9])
    print ('-+-+-')
    print (board[4] + '|' board[5] + '|' + board[6])
    print ('-+-+-')
    print(board[1] + '|' + board[2] + '|' + board[3])
    
def inputPlayerLetter():
    #lets the player type which letter they want to use
    #returns a list with the player's letter as the first item  
    #and the computer's letter as the second
    
    letter = ''
    while not (letter == 'X' or letter == 'I'):
    print('The great ninja war has started and you must battle your opponent, choose your weapon and battle them on the legendary tik tak toe battle field. ')
        print('Do you want to use a ninja star: X or a Katana: I ?')
        letter = input().upper()
    
    #the first element in the list is the player's letter;
    #the second is the computer's letter
    if letter == 'X':
        return ['X', 'I']
    else: 
        return ['I', 'x']

def whoGoesFirst():
    #randomly chooses who goes first
    
    if random.randint(0, 1) == 0:
        return 'computer'
    else:
        return 'player'
    
def makeMove(board, letter, move):
    board[move] = letter

def isWinner (bo, le):
    #given a board and a player's letter, this function returns True if
    #that player has won
    #we use "bo" instead of "board" and "le" instead of "letter" so we
    #don't have to type as much
    
    return 
        ((bo[7] == le and bo[8] == le and bo[9] == le) or
        (bo[4] == le and bo[5] == le and bo[6] == le) or
        (bo[1] == le and bo[2] == le and bo[3] == le) or
        (bo[7] == le and bo[4] == le and bo[1] == le) or
        (bo[8] == le and bo[5] == le and bo[2] == le) or
        (bo[9] == le and bo[6] == le and bo[3] == le) or
        (bo[7] == le and bo[5] == le and bo[3] == le) or
        (bo[9] == le and bo[5] == le and bo[1] == le))
        
# Created by Matthew Kim - 20882490

def getBoardCopy(board):
    # Function makes and returns a copy of the board list.
    boardCopy = []
    for i in board:
        boardCopy.append(i)
    return boardCopy
    
    def isSpaceFree(board, move):
        # If on the passed board, the passed move is free, it will return True.
        return board[move] == ' '
        
        def getPlayerMove(board):
            # Player may enter their move.
            move = ' '
            while move not in '1 2 3 4 5 6 7 8 9' .split() or not
                isSpaceFree(board, int(move)):
                  print('Pick your next move! (1-9)')
                  move = input()
            return int(move)
            
    def chooseRandomMoveFromList(board, movesList):
        # This returns a valid move onto the passed board from the list.
       # If no move is completed it will return None.
        possibleMoves = []
        for i in movesList:
            if isSpaceFree(board, i):
                possibleMoves.append(i)
                
        if len(possibleMoves) != 0:
            return random.choice(possibleMoves)
        else:
            return None
            
     def getComputerMove(board, computerLetter):
        # Given a board and the computer's letter, determine where to move and return that move.
        if computerLetter == 'X':
            playerLetter = 'I'
        else:
            playerLetter = 'X'
    
     # Tic Tac Toe algorithm part 3 - Hossein Kariminia
     # Checking to see if there are possibilities to win
     for i in range(1, 10):
         boardCopy = getBoardCopy(board)
         if isSpaceFree(boardCopy, i):
             makeMove(boardCopy, computerLetter, i)
             if isWinner(boardCopy, computerLetter):
                return i
 
      # Checking if player can win and block the opponent
     for i in range(1, 10):
         boardCopy = getBoardCopy(board)
         if isSpaceFree(boardCopy, i):
             makeMove(boardCopy, playerLetter, i)
             if isWinner(boardCopy, playerLetter):
                 return i

     # Try to take one of the corners, if they are free.
     move = chooseRandomMoveFromList(board, [1, 3, 7, 9])
     if move != None:
         return move

     # Try to take the center, if it is free.
     if isSpaceFree(board, 5):
         return 5

     # Move on one of the sides.
     return chooseRandomMoveFromList(board, [2, 4, 6, 8])

 def isBoardFull(board):
     # Return True if every space on the board has been taken. Otherwise,
           return False.
     for i in range(1, 10):
         if isSpaceFree(board, i):
             return False
     return True


 print('Welcome to Ninja Battle Tic-Tac-Toe!')

while True:
    # Reset the board.
    theBoard = [' '] * 10
    playerLetter, computerLetter = inputPlayerLetter()
    # PV:- This lets the player choose their character, assigning the opposite character to the computer
    # Lines 133-175 (from the website) assigned to Phavan Velnathan - 20961030
    turn = whoGoesFirst()
    # PV:- The code randomly decides who gets to make the first move
    print('The ' + turn + ' will make the first move.')
    # PV:- This displays who will go first
    gameIsPlaying = True
    # PV:- This code monitors if the game is active or finished
    
    while gameIsPlaying:
        # PV:- If the game is active, this loop will allow both player and computer to take turns playing
        if turn == 'player':
            # PV:- Player's turn unless false, then it is the computers
            drawBoard(theBoard)
            # PV:- Creates the game board on the screen
            move = getPlayerMove(theBoard)
            # PV:- Allows the player to select where they will move and checks if player is making a possible move
            
            makeMove(theBoard, playerLetter, move)
            # PV:- This code places the players character onto the board
            
            if isWinner(theBoard, playerLetter):
                # PV:- The code checks if isWinner returns as True and if you won on your turn
                drawBoard(theBoard)
                # PV:- This displays the board that won
                print('Victory, you have won the battle!')
                # PV:- This prints text congratulating the winner
                gameIsPlaying = False
                # PV:- Prevents the game from continuing onto the computers turn
            
            else:
                # PV:- This code checks if the game is tied by filling in the entire on your turn using an else statement
                if isBoardFull(theBoard):
                    drawBoard(theBoard)
                    print('You and your opponent are unable to continue, the battle is a draw and you live to fight another day.')
                    # PV:- If the above code comes back as True, then the tied board is displayed and a text is printed saying the game was tied
                    break
                # PV:- The while loop is then broken and prints a text asking the player to play again
                # PV:- If the else statement is False then the code uses the next else statement
                else:
                    turn = 'computer'
                    # PV:- Allows the computer to have a turn at the game
        else:
            # PV:- It is the computer's turn if the turn variable was not the players
            move = getComputerMove(theBoard, computerLetter)
            # PV:- Makes the computer choose where it wants to place its character
            makeMove(theBoard, computerLetter, move)
            # PV:- This code places the computers character onto the board
            
            if isWinner(theBoard, computerLetter):
                # PV:- The code checks if isWinner returns as True and if the computer won on the turn
                drawBoard(theBoard)
                # PV:- This displays the board that won
                print('Your opponent has beaten you and you run away.')
                # PV:- This prints a text saying you lost to the computer
                gameIsPlaying = False
                # PV:- Prevents the game from continuing onto the players turn
            else:
                # PV:- This code checks if the game is tied by filling in the entire on the computers turn using an else statement
                if isBoardFull(theBoard):
                    drawBoard(theBoard)
                    print('You and your opponent are unable to continue, the battle is a draw and you live to fight another day.')
                    # PV:- If the above code comes back as True, then the tied board is displayed and a text is printed saying the game was tied
                    break
                # PV:- The while loop is then broken and prints a text asking the player to play again
                # PV:- If the else statement is False then the code uses the next else statement
                else:
                    turn = 'player'
                    # PV:- if the game is not completed by the computer then the it becomes the players turn and the while loop continues
                    
    print('How about another battle ninja? (yes or no)')
    # PV:- This prints asks if the player would like another round of the game
    # PV:- If gameIsPlaying is set to False this block of code will run, which means the game has ended
    if not input().lower().startswith('y'):
        # PV:- If the input entered by the player does not start with 'y' then the loop of the game and ends it
        # PV:- if the player does want a rematch then the loop occurs, starting the game again
        break
    print('The War Has Ended')
    # PV:- Prints text telling the player the game is finished
    
# Reference :- Sweigart, A. (2015). 10 TIC-TAC-TOE. Chapter 10 - tic-tac-toe. Retrieved December 7, 2021, from https://inventwithpython.com/invent4thed/chapter10.html. 
© 2021 GitHub, Inc.
Terms
Privacy
Security
Status
Docs
Contact GitHub
Pricing
API
Training
Blog
About


